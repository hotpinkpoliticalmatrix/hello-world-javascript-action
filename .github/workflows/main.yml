on: [push]

jobs:
 hello_world_job:
  runs-on: ubuntu-latest
  name: A job to say hello
  steps:
   # To use this repository's private action,
   # you must check out the repository
   - name: Checkout
     uses: actions/checkout@v2
   - name: Set up Node
     uses: actions/setup-node@v1
     with:
      node-version: 12
   - name: Extract branch name
     shell: bash
     run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
     id: extract_branch
   - name: Hello world action step
     uses: ./ # Uses an action in the root directory
     id: hello
     with:
      who-to-greet: ${{ steps.extract_branch.outputs.branch }}
     # Use the output from the `hello` step
   - name: Get the production branch
     run: echo "The production branch is ${{ steps.hello.outputs.productionBranch }}"
   - name: Get the staging branch
     run: echo "The staging branch is ${{ steps.hello.outputs.stagingBranch }}"
   - name: Confirm push was to staging
     run: echo "The merge was made to staging is ${{ steps.hello.outputs.isPushToStaging }}"
   - name: Confirm push was to prod
     run: echo "The merge was made to prod is ${{ steps.hello.outputs.isPushToProd }}"
   - name: Open PR current branch is staging
     if: steps.hello.outputs.isPushToStaging == true
     id: pull
     uses: tretuna/sync-branches@1.4.0
     with:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      FROM_BRANCH: ${{ steps.hello.outputs.stagingBranch }}
      TO_BRANCH: "master"

     #   uses: tretuna/sync-branches@1.2.0
     #     with:
     #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     #       FROM_BRANCH: "**/release/20{{ date +%y }}.{{ date -v-1w +%V }}"
     #       TO_BRANCH: "test"
     #       PULL_REQUEST_TITLE: "Merge {FROM_BRANCH} with  {TO_BRANCH}"
     #       PULL_REQUEST_BODY: "sync-branches: New code has just landed in {FROM_BRANCH} so let's bring {TO_BRANCH} up to speed!"
     #  run:
# on: [push]

# jobs:
#  identify_target_branch:
#   runs-on: ubuntu-latest
#   name: Staging or Prod
#   steps:
#    - name: Extract branch name
#      shell: bash
#      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
#      id: extract_branch
#    - name: Show branch name
#      run: echo ${{ steps.extract_branch.outputs.branch }}
#    - name: Give branch name to script
#      id: branch-name
#      uses: hotpinkpoliticalmatrix/hello-world-javascript-action@v1.1
#      with:
#       current-branch: ${{ steps.extract_branch.outputs.branch }}
# #   - name: Hello world action step
# #     id: hello
# #     uses: hotpinkpoliticalmatrix/hello-world-javascript-action@v1.1
# #     with:
# #         type-of-hotfix: 'Mona the Octocat'
# #     #get name of staging
# #     #get name of prod
# #     if: endsWith(${{ steps.extract_branch.outputs.branch }},
# #     # if current branch is staging
# #   - name: Set target as staging
# #     run: echo '::set-output name=TARGET_BRANCH::staging'
# #     id: set-target-staging
# #   #if current branch is prod
# #   -
# # get_output_time:
# #   runs-on: ubuntu-latest
# #   name: A job to say hello
# #   steps:
# #     - name: Get the output time
# #       run: echo "The time was ${{ steps.hello.outputs.time }}"

# # Use the output from the `hello` step
